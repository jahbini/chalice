// Generated by CoffeeScript 1.12.7

/*
 * Chalice -- bindings for element creation and expression via teact and teacup
 */


/*
 * The oracle, a globally supplied object to this module has this signature
 * oracle = Oracle =
  name: 'Mithril'
  isValidElement: (c)->c.view?
  createElement: Mithril
 */

(function() {
  var Chalice, GreatEmptiness, doctypes, elements, fn1, fn2, fn3, fn4, i, j, l, len, len1, len2, len3, m, merge_elements, oracle, ref, ref1, ref2, ref3, tagName, teact, teacup,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  teact = require('../src/teact.coffee');

  teacup = require('../src/teacup.coffee');

  GreatEmptiness = GreatEmptiness = (function() {
    function GreatEmptiness(props) {
      this.props = props;
      this;
    }

    GreatEmptiness.prototype.isValidElement = function(c) {
      return c.view != null;
    };

    GreatEmptiness.prototype.name = 'great-emptiness';

    GreatEmptiness.prototype.Component = {};

    GreatEmptiness.prototype.createElement = function(props) {
      this.props = props;
      return this;
    };

    GreatEmptiness.prototype.summoner = teact;

    GreatEmptiness.prototype.conjurer = teacup;

    return GreatEmptiness;

  })();

  oracle = new extend(GreatEmptiness, (typeof Oracle !== "undefined" && Oracle !== null) || {});


  /*
  Examples of oracle -- the default is to do Teacup to HTML
    ReactDom = require 'react-dom'
    Oracle =
      summoner: React
      name: 'React'
      isValidElement: React.isValidElement
      Component: React.Component
      createElement: React.createElement
      conjurer: ReactDom.renderToString
    Mithril = require 'mithril'
    Oracle =
      name: 'Mithril'
      isValidElement: (c)->c.view?
      createElement: Mithril
      Component: {}
   */

  doctypes = {
    'default': '<!DOCTYPE html>',
    '5': '<!DOCTYPE html>',
    'xml': '<?xml version="1.0" encoding="utf-8" ?>',
    'transitional': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
    'strict': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
    'frameset': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
    '1.1': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
    'basic': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
    'mobile': '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
    'ce': '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "ce-html-1.0-transitional.dtd">'
  };

  elements = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button canvas caption cite code colgroup datalist dd del details dfn div dl dt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins kbd label legend li map mark menu meter nav noscript object ol optgroup option output p pre progress q rp rt ruby s samp section select small span strong sub summary sup table tbody td textarea tfoot th thead time title tr u ul video',
    raw: 'style',
    script: 'script',
    "void": 'area base br col command embed hr img input keygen link meta param source track wbr',
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing nextid noembed plaintext rb strike xmp big blink center font marquee multicol nobr spacer tt',
    obsolete_void: 'basefont frame'
  };

  merge_elements = function() {
    var a, args, element, i, j, len, len1, ref, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = [];
    for (i = 0, len = args.length; i < len; i++) {
      a = args[i];
      ref = elements[a].split(' ');
      for (j = 0, len1 = ref.length; j < len1; j++) {
        element = ref[j];
        if (indexOf.call(result, element) < 0) {
          result.push(element);
        }
      }
    }
    return result;
  };

  Chalice = (function() {
    var Component, dummyComponent;

    function Chalice() {}

    Chalice.prototype.isSelector = function(string) {
      var ref;
      return string.length > 1 && ((ref = string.charAt(0)) === '#' || ref === '.');
    };

    Chalice.prototype.parseSelector = function(selector) {
      var classes, i, id, klass, len, ref, ref1, token;
      id = null;
      classes = [];
      ref = selector.split('.');
      for (i = 0, len = ref.length; i < len; i++) {
        token = ref[i];
        token = token.trim();
        if (id) {
          classes.push(token);
        } else {
          ref1 = token.split('#'), klass = ref1[0], id = ref1[1];
          if (klass !== '') {
            classes.push(token);
          }
        }
      }
      return {
        id: id,
        classes: classes
      };
    };

    Chalice.prototype.normalizeArgs = function(args) {
      var arg, attrs, classes, contents, dataAttrs, i, id, index, k, len, parsedSelector, selector, v;
      attrs = {};
      selector = null;
      contents = null;
      for (index = i = 0, len = args.length; i < len; index = ++i) {
        arg = args[index];
        if (arg != null) {
          switch (typeof arg) {
            case 'string':
              if (index === 0 && this.isSelector(arg)) {
                selector = arg;
                parsedSelector = this.parseSelector(arg);
              } else {
                contents = arg;
              }
              break;
            case 'function':
            case 'number':
            case 'boolean':
              contents = arg;
              break;
            case 'object':
              if (arg.constructor === Object) {
                attrs = arg;
              }
              if (arg["default"] && arg.__esModule) {
                arg = arg["default"];
              }
              if (arg.constructor === Object && !Oracle.isValidElement(arg)) {
                attrs = Object.keys(arg).reduce(function(clone, key) {
                  clone[key] = arg[key];
                  return clone;
                }, {});
              } else {
                contents = arg;
              }
              break;
            default:
              contents = arg;
          }
        }
      }
      if (parsedSelector != null) {
        id = parsedSelector.id, classes = parsedSelector.classes;
        if (id != null) {
          attrs.id = id;
        }
        if (classes != null ? classes.length : void 0) {
          if (attrs["class"]) {
            classes.push(attrs["class"]);
          }
          attrs["class"] = classes.join(' ');
          if (attrs.className) {
            classes.push(attrs.className);
          }
          attrs.className = classes.join(' ');
        }
      }
      dataAttrs = attrs.data;
      if (typeof dataAttrs === 'object') {
        delete attrs.data;
        for (k in dataAttrs) {
          v = dataAttrs[k];
          attrs["data-" + k] = v;
        }
      }
      return {
        attrs: attrs,
        contents: contents,
        selector: selector
      };
    };

    Chalice.prototype.coffeescript = function(fn) {
      return this.raw("<script type=\"text/javascript\">(function() {\n  var __slice = [].slice,\n      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n  (" + (this.escape(fn.toString())) + ")();\n})();</script>");
    };

    Chalice.prototype.comment = function(text) {
      return this.raw("<!--" + (this.escape(text)) + "-->");
    };

    Chalice.prototype.doctype = function(type) {
      if (type == null) {
        type = 5;
      }
      return this.raw(doctypes[type]);
    };

    Chalice.prototype.ie = function(condition, contents) {
      this.raw("<!--[if " + (this.escape(condition)) + "]>");
      this.renderContents(contents);
      return this.raw("<![endif]-->");
    };

    Chalice.prototype.text = function(s) {
      if (this.htmlOut == null) {
        throw new Error("Chalice: can't call a tag function outside a rendering context");
      }
      this.htmlOut += (s != null) && this.escape(s.toString()) || '';
      return null;
    };

    Chalice.prototype.raw = function(s) {
      if (s == null) {
        return;
      }
      this.htmlOut += s;
      return null;
    };

    Chalice.prototype.escape = function(text) {
      return text.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };

    Chalice.prototype.quote = function(value) {
      return "\"" + value + "\"";
    };

    Chalice.prototype.use = function(plugin) {
      return plugin(this);
    };

    Chalice.prototype.tags = function() {
      var bound, boundMethodNames, fn1, i, len, method;
      bound = {};
      boundMethodNames = [].concat('cede coffeescript comment component doctype escape ie normalizeArgs raw render renderable script tag text use'.split(' '), merge_elements('regular', 'obsolete', 'raw', 'void', 'obsolete_void'));
      fn1 = (function(_this) {
        return function(method) {
          return bound[method] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this[method].apply(_this, args);
          };
        };
      })(this);
      for (i = 0, len = boundMethodNames.length; i < len; i++) {
        method = boundMethodNames[i];
        fn1(method);
      }
      return bound;
    };

    dummyComponent = Component = (function() {
      function Component() {}

      Component.prototype.view = function() {};

      return Component;

    })();

    Chalice.prototype.Component = function() {
      if (Oracle.Component) {
        return Oracle.Component;
      } else {
        return dummyComponent;
      }
    };

    Chalice.prototype.bless = function(Component, itsName) {
      var name;
      if (itsName == null) {
        itsName = null;
      }
      if (Component.__esModule && Component["default"]) {
        Component = Component["default"];
      }
      name = itsName || Component.name;
      blessedTags[name] = name;
      return Chalice.prototype[name] = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.crel.apply(_this, [Component].concat(slice.call(args)));
        };
      })(this);
    };

    Chalice.prototype.component = function(func) {
      return (function(_this) {
        return function() {
          var args, attrs, contents, ref, renderContents, selector;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          ref = _this.normalizeArgs(args), selector = ref.selector, attrs = ref.attrs, contents = ref.contents;
          renderContents = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            args.unshift(contents);
            return _this.renderContents.apply(_this, args);
          };
          return func.apply(_this, [selector, attrs, renderContents]);
        };
      })(this);
    };

    return Chalice;

  })();

  ref = merge_elements('regular', 'obsolete');
  fn1 = function(tagName) {
    return Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.tag.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (i = 0, len = ref.length; i < len; i++) {
    tagName = ref[i];
    fn1(tagName);
  }

  ref1 = merge_elements('raw');
  fn2 = function(tagName) {
    return Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.rawTag.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    tagName = ref1[j];
    fn2(tagName);
  }

  ref2 = merge_elements('script');
  fn3 = function(tagName) {
    return Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.scriptTag.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (l = 0, len2 = ref2.length; l < len2; l++) {
    tagName = ref2[l];
    fn3(tagName);
  }

  ref3 = merge_elements('void', 'obsolete_void');
  fn4 = function(tagName) {
    return Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (m = 0, len3 = ref3.length; m < len3; m++) {
    tagName = ref3[m];
    fn4(tagName);
  }

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = new Chalice().tags();
    module.exports.Chalice = Chalice;
  } else if (typeof define === 'function' && define.amd) {
    define('teacup', [], function() {
      return new Chalice().tags();
    });
  } else {
    window.teacup = new Chalice().tags();
    window.teacup.Chalice = Chalice;
  }

}).call(this);
