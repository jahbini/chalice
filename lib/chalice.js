// Generated by CoffeeScript 1.12.7

/*
 * Chalice -- bindings for element creation and expression via teact and teacup
 */


/*
 * The oracle, a globally supplied object to this module has this signature
Examples of oracle -- the default is to do Teacup to HTML
  ReactDom = require 'react-dom'
  Oracle =
    summoner: React
    name: 'React'
    isValidElement: React.isValidElement
    Component: React.Component
    createElement: React.createElement
    conjurer: ReactDom.renderToString
  Mithril = require 'mithril'
  Oracle =
    name: 'Mithril'
    isValidElement: (c)->c.view?
    createElement: Mithril
    Component: {}
 */

(function() {
  var Chalice, Component, GreatEmptiness, allTags, doctypes, dummyComponent, elements, fn, fn1, fn2, fn3, i, j, l, len, len1, len2, len3, m, mergeElements, oracle, ref, ref1, ref2, ref3, ref4, tagName, teacup,
    slice = [].slice,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ref = require('../src/html-tags'), doctypes = ref.doctypes, elements = ref.elements, mergeElements = ref.mergeElements, allTags = ref.allTags;

  teacup = require('../src/teacup.coffee');

  dummyComponent = Component = (function() {
    function Component() {
      var children1, props, tagName;
      tagName = arguments[0], props = arguments[1], children1 = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      this.props = props != null ? props : {};
      this.children = children1;
      if (this.children.length === 1) {
        this.children = this.children[0];
      }
      this.tagName = tagName;
      this;
    }

    Component.prototype.view = function() {};

    Component.prototype.render = function() {};

    return Component;

  })();

  GreatEmptiness = GreatEmptiness = (function() {
    function GreatEmptiness(oracle) {
      var defaultObject, key, ref1, value;
      if (oracle == null) {
        oracle = {};
      }
      if (typeof me !== "undefined" && me !== null) {
        return me;
      }
      this.teacup = new teacup;
      defaultObject = {
        isValidElement: function(c) {
          return c.view != null;
        },
        name: 'great-emptiness',
        Component: dummyComponent,
        createElement: function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(dummyComponent, args, function(){});
        },
        summoner: null,
        conjurer: this.teacup.render.bind(this.teacup)
      };
      ref1 = Object.assign(defaultObject, oracle);
      for (key in ref1) {
        value = ref1[key];
        GreatEmptiness.prototype[key] = value;
      }
      GreatEmptiness.prototype.me = this;
      this;
    }

    return GreatEmptiness;

  })();

  oracle = new GreatEmptiness(typeof Oracle !== "undefined" && Oracle !== null);

  Chalice = (function() {
    var crel;

    function Chalice() {
      this.tag = bind(this.tag, this);
      this.stack = null;
    }

    Chalice.prototype.resetStack = function(stack) {
      var previous;
      if (stack == null) {
        stack = null;
      }
      previous = this.stack;
      this.stack = stack;
      return previous;
    };

    Chalice.prototype.raw = function(text) {
      var el, ref1;
      if (!text.toString) {
        throw new Error("raw allows text only: expected a string");
      }
      el = oracle.createElement('text', {
        dangerouslySetInnerHtml: text
      });
      if ((ref1 = this.stack) != null) {
        ref1.push(el);
      }
      return el;
    };

    Chalice.prototype.tag = function() {
      var args, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (!((tagName != null) && 'string' === typeof tagName)) {
        throw new Error("HTML tag type is invalid: expected a string but got " + (typeof (tagName != null)));
      }
      return this.crel.apply(this, [tagname].concat(slice.call(args)));
    };

    crel = function() {
      var args, attrs, children, contents, el, previous, ref1, ref2, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (tagName == null) {
        throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + tagName);
      }
      ref1 = Chalice.normalizeArgs(args), attrs = ref1.attrs, contents = ref1.contents;
      switch (typeof contents) {
        case 'function':
          previous = Chalice.resetStack([]);
          contents();
          children = Chalice.resetStack(previous);
          break;
        default:
          children = contents;
      }
      debugger;
      if (children != null ? children.splice : void 0) {
        el = oracle.createElement.apply(oracle, [tagName, attrs].concat(slice.call(children)));
      } else {
        el = oracle.createElement(tagName, attrs, children);
      }
      console.log("Crel created el=", el);
      if ((ref2 = Chalice.stack) != null) {
        ref2.push(el);
      }
      return el;
    };

    Chalice.prototype.pureComponent = function(contents) {
      return function() {
        var children, previous;
        previous = this.resetStack(null);
        children = contents.apply(this, arguments);
        this.resetStack(previous);
        return children;
      };
    };

    Chalice.prototype.text = function(s) {
      var ref1;
      if (!(s != null ? s.toString : void 0)) {
        return s;
      }
      if ((ref1 = this.stack) != null) {
        ref1.push(s.toString());
      }
      return s.toString();
    };

    Chalice.prototype.isSelector = function(string) {
      var ref1;
      return string.length > 1 && ((ref1 = string.charAt(0)) === '#' || ref1 === '.');
    };

    Chalice.prototype.parseSelector = function(selector) {
      var classes, i, id, klass, len, ref1, ref2, token;
      id = null;
      classes = [];
      ref1 = selector.split('.');
      for (i = 0, len = ref1.length; i < len; i++) {
        token = ref1[i];
        token = token.trim();
        if (id) {
          classes.push(token);
        } else {
          ref2 = token.split('#'), klass = ref2[0], id = ref2[1];
          if (klass !== '') {
            classes.push(token);
          }
        }
      }
      return {
        id: id,
        classes: classes
      };
    };

    Chalice.prototype.normalizeArgs = function(args) {
      var arg, attrs, classes, contents, dataAttrs, i, id, index, k, len, parsedSelector, selector, v;
      attrs = {};
      selector = null;
      contents = null;
      for (index = i = 0, len = args.length; i < len; index = ++i) {
        arg = args[index];
        if (arg != null) {
          switch (typeof arg) {
            case 'string':
              if (index === 0 && this.isSelector(arg)) {
                selector = arg;
                parsedSelector = this.parseSelector(arg);
              } else {
                contents = arg;
              }
              break;
            case 'function':
            case 'number':
            case 'boolean':
              contents = arg;
              break;
            case 'object':
              if (arg.constructor === Object) {
                attrs = arg;
              }
              if (arg["default"] && arg.__esModule) {
                arg = arg["default"];
              }
              if (arg.constructor === Object && !oracle.isValidElement(arg)) {
                attrs = Object.keys(arg).reduce(function(clone, key) {
                  clone[key] = arg[key];
                  return clone;
                }, {});
              } else {
                contents = arg;
              }
              break;
            default:
              contents = arg;
          }
        }
      }
      if (parsedSelector != null) {
        id = parsedSelector.id, classes = parsedSelector.classes;
        if (id != null) {
          attrs.id = id;
        }
        if (classes != null ? classes.length : void 0) {
          if (attrs["class"]) {
            classes.push(attrs["class"]);
          }
          attrs["class"] = classes.join(' ');
          if (attrs.className) {
            classes.push(attrs.className);
          }
          attrs.className = classes.join(' ');
        }
      }
      dataAttrs = attrs.data;
      if (typeof dataAttrs === 'object') {
        delete attrs.data;
        for (k in dataAttrs) {
          v = dataAttrs[k];
          attrs["data-" + k] = v;
        }
      }
      return {
        attrs: attrs,
        contents: contents,
        selector: selector
      };
    };

    Chalice.prototype.use = function(plugin) {
      return plugin(this);
    };

    Chalice.prototype.render = function() {
      var node, previous, rest, structure;
      node = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      previous = this.resetStack(null);
      try {
        structure = node.apply(null, rest);
      } catch (error) {
        debugger;
      }
      this.resetStack(previous);
      return oracle.conjurer(structure);
    };

    Chalice.prototype.tags = function() {
      var bound, boundMethodNames, fn, i, len, method;
      bound = {};
      boundMethodNames = [].concat('bless cede coffeescript comment component doctype escape ie normalizeArgs oracle raw render renderable script tag text use'.split(' '), mergeElements('regular', 'obsolete', 'raw', 'void', 'obsolete_void'));
      fn = (function(_this) {
        return function(method) {
          return allTags[method] = bound[method] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this[method].apply(_this, args);
          };
        };
      })(this);
      for (i = 0, len = boundMethodNames.length; i < len; i++) {
        method = boundMethodNames[i];
        fn(method);
      }
      return bound;
    };

    Chalice.prototype.oracle = function() {
      return oracle;
    };

    Chalice.prototype.bless = function(component, itsName) {
      var name;
      if (itsName == null) {
        itsName = null;
      }
      if (component.__esModule && component["default"]) {
        component = component["default"];
      }
      name = itsName || component.name;
      return allTags[name] = Chalice.prototype[name] = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.crel.apply(_this, [component].concat(slice.call(args)));
        };
      })(this);
    };

    Chalice.prototype.component = function(func) {
      return (function(_this) {
        return function() {
          var args, attrs, contents, ref1, renderContents, selector;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          ref1 = _this.normalizeArgs(args), selector = ref1.selector, attrs = ref1.attrs, contents = ref1.contents;
          renderContents = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            args.unshift(contents);
            return _this.renderContents.apply(_this, args);
          };
          return func.apply(_this, [selector, attrs, renderContents]);
        };
      })(this);
    };

    return Chalice;

  })();

  ref1 = mergeElements('regular', 'obsolete');
  fn = function(tagName) {
    return allTags[tagName] = Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.crel.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (i = 0, len = ref1.length; i < len; i++) {
    tagName = ref1[i];
    fn(tagName);
  }

  ref2 = mergeElements('raw');
  fn1 = function(tagName) {
    return allTags[tagName] = Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.crel.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    tagName = ref2[j];
    fn1(tagName);
  }

  ref3 = mergeElements('script');
  fn2 = function(tagName) {
    return allTags[tagName] = Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.crel.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (l = 0, len2 = ref3.length; l < len2; l++) {
    tagName = ref3[l];
    fn2(tagName);
  }

  ref4 = mergeElements('void', 'obsolete_void');
  fn3 = function(tagName) {
    return allTags[tagName] = Chalice.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.crel.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (m = 0, len3 = ref4.length; m < len3; m++) {
    tagName = ref4[m];
    fn3(tagName);
  }

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = new Chalice().tags();
    module.exports.Chalice = Chalice;
  } else if (typeof define === 'function' && define.amd) {
    define('teacup', [], function() {
      return new Chalice().tags();
    });
  } else {
    window.teacup = new Chalice().tags();
    window.teacup.Chalice = Chalice;
  }

}).call(this);
