// Generated by CoffeeScript 1.12.7
(function() {
  var Master, Mithril, React, Rebass, Teact, blessedTags, elements, fn, fn1, fn2, funct, i, j, key, len, len1, merge_elements, ref, ref1, singleton, tagName,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    hasProp = {}.hasOwnProperty;

  Rebass = require('rebass');

  if (!(Master = typeof Pylon !== "undefined" && Pylon !== null ? Pylon.get("Master") : void 0)) {
    React = require('react');
    Master = {
      name: 'React',
      isValidElement: React.isValidElement,
      Component: React.Component,
      createElement: React.createElement
    };
    Mithril = require('mithril');
  }

  Master = {
    name: 'Mithril',
    isValidElement: function(c) {
      return c.view != null;
    },
    createElement: Mithril
  };

  blessedTags = {};

  elements = {
    regular: 'a abbr address article aside audio b bdi bdo blockquote body button canvas caption cite code colgroup datalist dd del details dfn div dl dt em fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins kbd label legend li map mark menu meter nav noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small span strong sub summary sup table tbody td textarea tfoot th thead time title tr u ul video',
    "void": 'area base br col command embed hr img input keygen link meta param source track wbr',
    obsolete: 'applet acronym bgsound dir frameset noframes isindex listing nextid noembed plaintext rb strike xmp big blink center font marquee multicol nobr spacer tt',
    obsolete_void: 'basefont frame'
  };

  merge_elements = function() {
    var a, args, element, i, j, len, len1, ref, result;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = [];
    for (i = 0, len = args.length; i < len; i++) {
      a = args[i];
      ref = elements[a].split(' ');
      for (j = 0, len1 = ref.length; j < len1; j++) {
        element = ref[j];
        if (indexOf.call(result, element) < 0) {
          result.push(element);
        }
      }
    }
    return result;
  };

  Teact = (function() {
    var Component, dummyComponent;

    function Teact() {
      this.stack = null;
    }

    Teact.prototype.resetStack = function(stack) {
      var previous;
      if (stack == null) {
        stack = null;
      }
      previous = this.stack;
      this.stack = stack;
      return previous;
    };

    Teact.prototype.isSelector = function(string) {
      var ref;
      return string.length > 1 && ((ref = string.charAt(0)) === '#' || ref === '.');
    };

    Teact.prototype.parseSelector = function(selector) {
      var classes, i, id, klass, len, ref, ref1, token;
      id = null;
      classes = [];
      ref = selector.split('.');
      for (i = 0, len = ref.length; i < len; i++) {
        token = ref[i];
        token = token.trim();
        if (id) {
          classes.push(token);
        } else {
          ref1 = token.split('#'), klass = ref1[0], id = ref1[1];
          if (klass !== '') {
            classes.push(token);
          }
        }
      }
      return {
        id: id,
        classes: classes
      };
    };

    Teact.prototype.normalizeArgs = function(args) {
      var arg, attrs, classes, contents, dataAttrs, i, id, index, k, len, parsedSelector, selector, v;
      attrs = {};
      selector = null;
      contents = null;
      for (index = i = 0, len = args.length; i < len; index = ++i) {
        arg = args[index];
        if (arg != null) {
          switch (typeof arg) {
            case 'string':
              if (index === 0 && this.isSelector(arg)) {
                selector = arg;
                parsedSelector = this.parseSelector(arg);
              } else {
                contents = arg;
              }
              break;
            case 'function':
            case 'number':
            case 'boolean':
              contents = arg;
              break;
            case 'object':
              if (arg["default"] && arg.__esModule) {
                arg = arg["default"];
              }
              if (arg.constructor === Object && !Master.isValidElement(arg)) {
                attrs = Object.keys(arg).reduce(function(clone, key) {
                  clone[key] = arg[key];
                  return clone;
                }, {});
              } else {
                contents = arg;
              }
              break;
            default:
              contents = arg;
          }
        }
      }
      if (parsedSelector != null) {
        id = parsedSelector.id, classes = parsedSelector.classes;
        if (id != null) {
          attrs.id = id;
        }
        if (classes != null ? classes.length : void 0) {
          if (attrs.className) {
            classes.push(attrs.className);
          }
          attrs.className = classes.join(' ');
        }
      }
      dataAttrs = attrs.data;
      if (typeof dataAttrs === 'object') {
        delete attrs.data;
        for (k in dataAttrs) {
          v = dataAttrs[k];
          attrs["data-" + k] = v;
        }
      }
      return {
        attrs: attrs,
        contents: contents,
        selector: selector
      };
    };

    Teact.prototype.crel = function() {
      var args, attrs, children, contents, el, previous, ref, ref1, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (tagName == null) {
        throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + tagName);
      }
      ref = this.normalizeArgs(args), attrs = ref.attrs, contents = ref.contents;
      switch (typeof contents) {
        case 'function':
          previous = this.resetStack([]);
          contents();
          children = this.resetStack(previous);
          break;
        default:
          children = contents;
      }
      if (children != null ? children.splice : void 0) {
        el = Master.createElement.apply(Master, [tagName, attrs].concat(slice.call(children)));
      } else {
        el = Master.createElement(tagName, attrs, children);
      }
      if ((ref1 = this.stack) != null) {
        ref1.push(el);
      }
      return el;
    };

    Teact.prototype.pureComponent = function(contents) {
      var teact;
      teact = this;
      return function() {
        var children, previous;
        previous = teact.resetStack(null);
        children = contents.apply(teact, arguments);
        teact.resetStack(previous);
        return children;
      };
    };

    Teact.prototype.selfClosingTag = function() {
      var args, attrs, contents, ref, tagName;
      tagName = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      ref = this.normalizeArgs(args), attrs = ref.attrs, contents = ref.contents;
      if (contents) {
        throw new Error("Teact: <" + tagName + "/> must not have content.  Attempted to nest " + contents);
      }
      return this.crel(tagName, attrs);
    };

    Teact.prototype.text = function(s) {
      var ref;
      if (!(s != null ? s.toString : void 0)) {
        return s;
      }
      if ((ref = this.stack) != null) {
        ref.push(s.toString());
      }
      return s.toString();
    };

    Teact.prototype.use = function(plugin) {
      return plugin(this);
    };

    Teact.prototype.tags = function() {
      var bound, boundMethodNames, fn, fn1, i, len, method;
      bound = {};
      boundMethodNames = [].concat('bless ie normalizeArgs script crel pureComponent text use'.split(' '), merge_elements('regular', 'obsolete', 'void', 'obsolete_void'));
      fn = (function(_this) {
        return function(method) {
          return bound[method] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this[method].apply(_this, args);
          };
        };
      })(this);
      for (i = 0, len = boundMethodNames.length; i < len; i++) {
        method = boundMethodNames[i];
        fn(method);
      }
      bound.crel.text = bound.text;
      fn1 = (function(_this) {
        return function(method) {
          return bound[method] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return _this[method].apply(_this, args);
          };
        };
      })(this);
      for (method in blessedTags) {
        fn1(method);
      }
      return bound;
    };

    dummyComponent = Component = (function() {
      function Component() {}

      Component.prototype.view = function() {};

      return Component;

    })();

    Teact.prototype.Component = function() {
      if (Master.Component) {
        return Master.Component;
      } else {
        return dummyComponent;
      }
    };

    Teact.prototype.bless = function(Component, itsName) {
      var name;
      if (itsName == null) {
        itsName = null;
      }
      if (Component.__esModule && Component["default"]) {
        Component = Component["default"];
      }
      name = itsName || Component.name;
      blessedTags[name] = name;
      return Teact.prototype[name] = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return _this.crel.apply(_this, [Component].concat(slice.call(args)));
        };
      })(this);
    };

    return Teact;

  })();

  ref = merge_elements('regular', 'obsolete');
  fn = function(tagName) {
    return Teact.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.crel.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (i = 0, len = ref.length; i < len; i++) {
    tagName = ref[i];
    fn(tagName);
  }

  ref1 = merge_elements('void', 'obsolete_void');
  fn1 = function(tagName) {
    return Teact.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, [tagName].concat(slice.call(args)));
    };
  };
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    tagName = ref1[j];
    fn1(tagName);
  }

  fn2 = function(key, funct) {
    blessedTags[key] = key;
    return Teact.prototype[key] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!(!funct || funct === true)) {
        return this.crel.apply(this, [funct].concat(slice.call(args)));
      }
    };
  };
  for (key in Rebass) {
    if (!hasProp.call(Rebass, key)) continue;
    funct = Rebass[key];
    fn2(key, funct);
  }

  singleton = new Teact();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = singleton.tags();
    module.exports.Teact = Teact;
  }

}).call(this);
