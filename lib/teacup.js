// Generated by CoffeeScript 1.12.7
(function() {
  var Teacup, allTags, doctypes, elements, fn1, fn2, fn3, fn4, i, j, l, len, len1, len2, len3, m, mergeElements, ref, ref1, ref2, ref3, ref4, tagName,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('../src/html-tags'), doctypes = ref.doctypes, elements = ref.elements, mergeElements = ref.mergeElements, allTags = ref.allTags;

  module.exports = Teacup = Teacup = (function() {
    function Teacup() {
      this.htmlOut = null;
    }

    Teacup.prototype.resetBuffer = function(html) {
      var previous;
      if (html == null) {
        html = null;
      }
      previous = this.htmlOut;
      this.htmlOut = html;
      console.log("HTML out returns ", previous);
      return previous;
    };

    Teacup.prototype.march = function(component) {
      var c, i, len, node, result, tagConstructor, tagName;
      if (!component) {
        return '';
      }
      console.log("Marching to ", component);
      switch (typeof component) {
        case 'string':
        case 'number':
          this.text(component.toString());
          break;
        case 'object':
          if (Array.isArray(component)) {
            for (i = 0, len = component.length; i < len; i++) {
              c = component[i];
              this.march(c);
            }
          } else {
            try {
              debugger;
              tagName = component.tagName;
              if ('function' === typeof tagName) {
                debugger;
                tagConstructor = tagName;
                tagName = tagConstructor.name;
                node = new tagConstructor(tagName, component.props, component.children);
                if (!Teacup.prototype[tagName]) {
                  Teacup.prototype[tagName] = function() {
                    var args, component, tagName;
                    tagName = arguments[0], component = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
                    return this.tag.apply(this, [component].concat(slice.call(args)));
                  };
                }
                this.march(node);
              } else {
                debugger;
                result = this[tagName](tagName, component);
                this.raw(result);
              }
            } catch (error) {
              debugger;
            }
          }
          break;
        default:
          debugger;
          this.text("bad component?");
          this.text(component.toString());
          return;
      }
    };

    Teacup.prototype.render = function(component) {
      var previous, result;
      previous = this.resetBuffer('');
      try {
        this.march(component);
      } finally {
        result = this.resetBuffer(previous);
      }
      return result;
    };

    Teacup.prototype.cede = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.render.apply(this, args);
    };

    Teacup.prototype.renderable = function(template) {
      var teacup;
      teacup = this;
      return function() {
        var args, result;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        if (teacup.htmlOut === null) {
          teacup.htmlOut = '';
          try {
            template.apply(this, args);
          } finally {
            result = teacup.resetBuffer();
          }
          return result;
        } else {
          return template.apply(this, args);
        }
      };
    };

    Teacup.prototype.renderAttr = function(name, value) {
      var k, v;
      if (value == null) {
        return " " + name;
      }
      if (value === false) {
        return '';
      }
      if (name === 'data' && typeof value === 'object') {
        return ((function() {
          var results;
          results = [];
          for (k in value) {
            v = value[k];
            results.push(this.renderAttr("data-" + k, v));
          }
          return results;
        }).call(this)).join('');
      }
      if (value === true) {
        value = name;
      }
      return " " + name + "=" + (this.quote(this.escape(value.toString())));
    };

    Teacup.prototype.attrOrder = ['id', 'class'];

    Teacup.prototype.renderAttrs = function(obj) {
      var i, len, name, ref1, result, value;
      result = '';
      ref1 = this.attrOrder;
      for (i = 0, len = ref1.length; i < len; i++) {
        name = ref1[i];
        if (name in obj) {
          result += this.renderAttr(name, obj[name]);
        }
      }
      for (name in obj) {
        value = obj[name];
        if (indexOf.call(this.attrOrder, name) >= 0) {
          continue;
        }
        result += this.renderAttr(name, value);
      }
      return result;
    };

    Teacup.prototype.renderContents = function() {
      var contents, rest, result;
      contents = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (contents == null) {

      } else if (typeof contents === 'function') {
        result = contents.apply(this, rest);
        if (typeof result === 'string') {
          return this.text(result);
        }
      } else {
        return this.text(contents);
      }
    };

    Teacup.prototype.tag = function(cell) {
      var children, props, tagName;
      tagName = cell.tagName, props = cell.props, children = cell.children;
      this.raw("<" + tagName + (this.renderAttrs(props)) + ">");
      this.march(children);
      return this.raw("</" + tagName + ">");
    };

    Teacup.prototype.rawTag = function(cell) {
      var children, props, tagName;
      tagName = cell.tagName, props = cell.props, children = cell.children;
      this.raw("<" + tagName + (this.renderAttrs(props)) + ">");
      this.raw(children);
      return this.raw("</" + tagName + ">");
    };

    Teacup.prototype.scriptTag = function(cell) {
      var children, props, tagName;
      tagName = cell.tagName, props = cell.props, children = cell.children;
      this.raw("<" + tagName + (this.renderAttrs(props)) + ">");
      this.renderContents(children);
      return this.raw("</" + tagName + ">");
    };

    Teacup.prototype.selfClosingTag = function(cell) {
      var children, props, tagName;
      tagName = cell.tagName, props = cell.props, children = cell.children;
      if (children) {
        throw new Error("Chalice: <" + tagName + "/> must not have content.  Attempted to nest " + children);
      }
      return this.raw("<" + tagName + (this.renderAttrs(props)) + "/>");
    };

    Teacup.prototype.coffeescript = function(fn) {
      return this.raw("<script type=\"text/javascript\">(function() {\n  var __slice = [].slice,\n      __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n      __hasProp = {}.hasOwnProperty,\n      __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n  (" + (this.escape(fn.toString())) + ")();\n})();</script>");
    };

    Teacup.prototype.comment = function(text) {
      return this.raw("<!--" + (this.escape(text)) + "-->");
    };

    Teacup.prototype.doctype = function(type) {
      if (type == null) {
        type = 5;
      }
      return this.raw(doctypes[type]);
    };

    Teacup.prototype.ie = function(condition, contents) {
      this.raw("<!--[if " + (this.escape(condition)) + "]>");
      this.renderContents(contents);
      return this.raw("<![endif]-->");
    };

    Teacup.prototype.text = function(s) {
      if (this.htmlOut == null) {
        throw new Error("Chalice: can't call a tag function outside a rendering context");
      }
      this.htmlOut += (s != null) && this.escape(s.toString()) || '';
      console.log("text appends ", (s != null) && this.escape(s.toString()) || '');
      return null;
    };

    Teacup.prototype.raw = function(s) {
      if (s == null) {
        return;
      }
      this.htmlOut += s;
      console.log("raw appends ", (s != null) && this.escape(s.toString()) || '');
      return null;
    };

    Teacup.prototype.escape = function(text) {
      return text.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };

    Teacup.prototype.quote = function(value) {
      return "\"" + value + "\"";
    };

    Teacup.prototype.component = function(func) {
      return (function(_this) {
        return function() {
          var args, attrs, contents, ref1, renderContents, selector;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          ref1 = _this.normalizeArgs(args), selector = ref1.selector, attrs = ref1.attrs, contents = ref1.contents;
          renderContents = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            args.unshift(contents);
            return _this.renderContents.apply(_this, args);
          };
          return func.apply(_this, [selector, attrs, renderContents]);
        };
      })(this);
    };

    return Teacup;

  })();

  ref1 = mergeElements('regular', 'obsolete');
  fn1 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.tag.apply(this, args);
    };
  };
  for (i = 0, len = ref1.length; i < len; i++) {
    tagName = ref1[i];
    fn1(tagName);
  }

  ref2 = mergeElements('raw');
  fn2 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.rawTag.apply(this, args);
    };
  };
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    tagName = ref2[j];
    fn2(tagName);
  }

  ref3 = mergeElements('script');
  fn3 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.scriptTag.apply(this, args);
    };
  };
  for (l = 0, len2 = ref3.length; l < len2; l++) {
    tagName = ref3[l];
    fn3(tagName);
  }

  ref4 = mergeElements('void', 'obsolete_void');
  fn4 = function(tagName) {
    return Teacup.prototype[tagName] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.selfClosingTag.apply(this, args);
    };
  };
  for (m = 0, len3 = ref4.length; m < len3; m++) {
    tagName = ref4[m];
    fn4(tagName);
  }

}).call(this);
